// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model User {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    imageUrl       String?
    firstName      String?
    lastName       String?
    emailAddress   String          @unique
    credits        Int             @default(150)
    userToProjects UserToProject[]
    stripeTransactions stripeTransaction[]
}

model Project {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    name           String
    githubUrl      String
    githubToken    String?
    deletedAt      DateTime
    userToProjects UserToProject[]
    commits        Commit[]
    meetings       Meeting[]
    questions Question[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    projectId String
    user      User     @relation(fields: [userId], references: [id])
    project   Project  @relation(fields: [projectId], references: [id])
}

//SourceCodeaEmbeddings: id , sourceCode, fileName, summary, porjectId,project

model SourceCodeaEmbeddings {
    id         String @id @default(cuid())
    sourceCode String
    fileName   String
    summary    String
    projectId  String
    project    String
}

//commit  id, createdAt, updatedAt, projectId, project @relation,  commitMessage,commitHash, commitAuthorName, commitAuthorAvatar,commitDate, summary
model Commit {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id])
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    commitDate         DateTime
    summary            String
}

//issues model,  Meeting: id, createdAt, updatedAt, meetingUrl, name, projetId, project. status MeetingStatus(@default(PROCESSING))  issues: isssue[]

model Meeting {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    meetingUrl String
    name       String
    projectId  String
    project    Project       @relation(fields: [projectId], references: [id])
    status     MeetingStatus @default(PROCESSING)
    issues     Issue[]
    //issues  id, createdAt, updatedAt, start, end, gist, headline,summary, meetingId, meeting
}

model Issue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    start     String
    end       String
    gist      String
    headLine  String
    summary   String
    meetingId String
    meeting   Meeting  @relation(fields: [meetingId], references: [id])
}

//meetingStatus
enum MeetingStatus {
    PROCESSING
    COMPLETED
}

//Question: //id, createdAt,updatedAt, question, answer,fileReference JSON,projectId , project,userId, user

model Question{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updaetdAt  DateTime @updatedAt
    question String
    answer String
    fileReference Json
    projectId String
    project Project @relation(fields:[projectId],references:[id])
}

//stripeTransactions: id, createdAt, updatedAt, userId,user, credits
model StripeTransction{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String
    user User @relation(fields:[userId], references:[id])
    credits Int
}